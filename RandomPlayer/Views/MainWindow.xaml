<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:RandomPlayer.ViewModels"
        xmlns:controls="clr-namespace:System.Windows.Controls;assembly=PresentationFramework"
        xmlns:converters="clr-namespace:RandomPlayer.Views.Converters"
        xmlns:cc="clr-namespace:RandomPlayer.Views.Controls"
        xmlns:mdt="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" x:Class="RandomPlayer.Views.MainWindow"
        mc:Ignorable="d"
        Title="Random Player"
        Width="500"
        SizeToContent="Height"
        ResizeMode="CanMinimize"
        Icon="../Ressources/Icon.ico"
        WindowStartupLocation="CenterScreen">

    <Window.Resources>
        <vm:MainWindowViewModel x:Key="ViewModel"/>
        <BooleanToVisibilityConverter x:Key="VisibilityConverter" />
        <converters:InverseBooleanConverter x:Key="InvertBooleanConverter" />
        <converters:ThemeTypeConverter x:Key="ThemeTypeConverter" />

        <!-- BUTTON 1 -->
        <Style x:Key="Button1" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" Padding="15,10">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="{DynamicResource Color.Button1.Static.Background}" />
            <Setter Property="Foreground" Value="{DynamicResource Color.Button1.Static.Text}" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource Color.Button1.Hover.Background}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{DynamicResource Color.Button1.Pressed.Background}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="{DynamicResource Color.Button1.Enabled.Background}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- BUTTON 2 -->
        <Style x:Key="Button2" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{DynamicResource Color.Button2.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Color.Button2.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource Color.Button2.Static.Text}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource Color.Button2.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Color.Button2.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource Color.Button2.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Color.Button2.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource Color.Button2.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Color.Button2.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Color.Button2.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- TEXTBOX -->
        <Style x:Key="TextBox" TargetType="{x:Type TextBox}">
            <Setter Property="Background" Value="{DynamicResource Color.TextBox.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Color.TextBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource Color.TextBox.Static.Text}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Color.TextBox.Hover.Border}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Color.TextBox.Focus.Border}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <!--<Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>-->
        </Style>
        
        <!-- COMBOBOX-->
        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{DynamicResource Color.ComboBox.Static.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource Color.ComboBox.Static.Border}">
                            <Border x:Name="splitBorder" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="Transparent">
                                <Path x:Name="arrow" VerticalAlignment="Center" Margin="0" HorizontalAlignment="Center" Fill="{DynamicResource Color.ComboBox.Static.Glyph}" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.Static.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.Static.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource Color.ComboBox.Static.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource Color.ComboBox.Static.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource Color.ComboBox.MouseOver.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.MouseOver.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.MouseOver.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.MouseOver.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource Color.ComboBox.MouseOver.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource Color.ComboBox.MouseOver.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource Color.ComboBox.Pressed.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.Pressed.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.Pressed.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.Pressed.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource Color.Color.ComboBox.Pressed.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBox.Pressed.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource Color.ComboBox.Disabled.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.Disabled.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.Disabled.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Color.ComboBox.Disabled.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource Color.ComboBox.Disabled.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource Color.ComboBox.Disabled.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ComboBox" TargetType="{x:Type ComboBox}">
            <Setter Property="Background" Value="{DynamicResource Color.ComboBox.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Color.ComboBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource Color.ComboBox.Static.Text}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                    <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource Color.Button2.MouseOver.Border}" BorderThickness="1" Background="{DynamicResource Color.ComboBox.Static.Background}">
                                        <ScrollViewer x:Name="DropDownScrollViewer">
                                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                                </Canvas>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Themes:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="true"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </MultiTrigger>
                            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid DataContext="{StaticResource ViewModel}" Background="{DynamicResource Color.Background}">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <!-- 0 -->
            <RowDefinition Height="auto"/>
            <!-- 1 -->
            <RowDefinition Height="auto"/>
            <!-- 2 -->
            <RowDefinition Height="auto"/>
            <!-- 3 -->
            <RowDefinition Height="auto"/>
            <!-- 4 -->
            <RowDefinition Height="auto"/>
            <!-- 5 -->
        </Grid.RowDefinitions>

        <Menu Grid.Row="0">
            <MenuItem Header="Fichier">
                <MenuItem Header="Thème">
                    <MenuItem Header="Light" IsCheckable="True" IsChecked="{Binding SelectedTheme, ConverterParameter=Light, Converter={StaticResource ThemeTypeConverter}}" />
                    <MenuItem Header="Dark" IsCheckable="True" IsChecked="{Binding SelectedTheme, ConverterParameter=Dark, Converter={StaticResource ThemeTypeConverter}}" />
                </MenuItem>
                <Separator />
                <MenuItem Header="Quitter" Command="{Binding QuitCommand}" />
            </MenuItem>
        </Menu>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>

            <Button Grid.Column="0" Content="Random" Padding="10" Command="{Binding RandomCommand}" Style="{StaticResource Button1}" />
            <Button Grid.Column="1" Content="Lancer" Padding="10" IsEnabled="{Binding LaunchButtonEnable}" Command="{Binding LaunchCommand}" Style="{StaticResource Button1}" />
            <Button Grid.Column="2" Padding="10" Command="{Binding RefreshCommand}" Style="{StaticResource Button1}">
                <mdt:PackIcon Kind="Refresh" />
            </Button>
        </Grid>

        <GroupBox Grid.Row="2" Header="Options" Margin="10,0,10,10" Padding="5,0,5,0" IsEnabled="{Binding EnableProgressBar, Converter={StaticResource InvertBooleanConverter}}" Foreground="{DynamicResource Color.Text}">
            <StackPanel>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto" />
                        <ColumnDefinition Width="1*" />
                        <ColumnDefinition Width="auto" />
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Column="0" VerticalAlignment="Center" Text="Chemin : " Foreground="{DynamicResource Color.Text}" />
                    <TextBox Grid.Column="1" VerticalAlignment="Center" Padding="0 3" Text="{Binding SelectedFolder}" Style="{StaticResource TextBox}" />
                    <Button Grid.Column="2" VerticalAlignment="Center" Padding="10 3" Content="Parcourir" Command="{Binding SelectFolderCommand}" Style="{DynamicResource Button2}" />
                </Grid>
                <CheckBox Margin="0,5,0,5" Content="Lancement automatique" IsChecked="{Binding AutoLaunchOption}" Foreground="{DynamicResource Color.Text}"/>
                <CheckBox Margin="0,5,0,5" Content="Rechercher dans les sous-dossiers" IsChecked="True" Command="{Binding SubfolderChangedCommand}" Foreground="{DynamicResource Color.Text}" />
                <StackPanel Margin="0,5,0,5" Orientation="Horizontal">
                    <Label Content="Type de fichier :" Foreground="{DynamicResource Color.Text}" />
                    <ComboBox SelectedItem="{Binding SelectedFileType}" Style="{DynamicResource ComboBox}">
                        <ComboBoxItem x:Name="all" Content="Tous" IsSelected="True" />
                        <ComboBoxItem x:Name="movies" Content="Vidéos"/>
                        <ComboBoxItem x:Name="pictures" Content="Photos"/>
                        <ComboBoxItem x:Name="songs" Content="Musiques"/>
                    </ComboBox>

                    <Label Content="Programme :" Foreground="{DynamicResource Color.Text}" />
                    <ComboBox ItemsSource="{Binding ApplciationList}" SelectedValue="{Binding SelectedApplication}" DisplayMemberPath="Name" Style="{DynamicResource ComboBox}"/>
                </StackPanel>
                <Grid Margin="0,5,0,5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>

                    <Label Grid.Column="0" Content="Recherche :" Foreground="{DynamicResource Color.Text}" />
                    <TextBox Grid.Column="1" Text="{Binding SearchText, Mode=TwoWay}" VerticalAlignment="Center" Padding="0 3" Style="{StaticResource TextBox}" />
                </Grid>

            </StackPanel>
        </GroupBox>

        <GroupBox Grid.Row="3" Header="Informations" Margin="10,0,10,10" Foreground="{DynamicResource Color.Text}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>

                <Grid Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>

                    <Label Grid.Column="0" Content="Dossier :" Foreground="{DynamicResource Color.Text}" />
                    <Label Grid.Column="1" Content="{Binding SelectedFile.DirectoryName}" Foreground="{DynamicResource Color.Text}" />
                </Grid>

                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>

                    <Label Grid.Column="0" Content="Fichier :" Foreground="{DynamicResource Color.Text}" />
                    <Label Grid.Column="1" Content="{Binding SelectedFile.Name}" Foreground="{DynamicResource Color.Text}" />
                </Grid>

                <ContentControl Grid.Row="2" Padding="10" Content="{Binding DetailsControl}" />
            </Grid>
        </GroupBox>

        <GroupBox Grid.Row="4" Header="Actions" Margin="10,0,10,10" Padding="5" IsEnabled="{Binding EnableProgressBar, Converter={StaticResource InvertBooleanConverter}}" Foreground="{DynamicResource Color.Text}">
            <StackPanel>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="1*"/>
                    </Grid.ColumnDefinitions>

                    <Button Grid.Column="0" Padding="5" IsEnabled="{Binding LaunchButtonEnable}" Command="{Binding OpenFolderCommand}" Style="{StaticResource Button1}" Content="Ouvrir le dossier"/>
                    <Button Grid.Column="1" Padding="5" IsEnabled="{Binding LaunchButtonEnable}" Command="{Binding RenameCommand}" Style="{StaticResource Button1}" Content="Renommer"/>
                    <Button Grid.Column="2" Padding="5" IsEnabled="{Binding LaunchButtonEnable}" Command="{Binding DeleteCommand}" Style="{StaticResource Button1}" Content="Supprimer"/>
                </Grid>

                <Button Grid.Column="3" Padding="5" IsEnabled="{Binding PrevButtonEnable}" Command="{Binding PreviousCommand}" Style="{StaticResource Button1}" Content="Précédent"/>
            </StackPanel>
        </GroupBox>

        <Grid Grid.Row="5" Margin="10,0,10,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <ProgressBar Grid.Column="0" Margin="0,0,10,0" Height="10" Visibility="{Binding EnableProgressBar, Converter={StaticResource VisibilityConverter}}" IsIndeterminate="True" VerticalAlignment="Center" />
            <Label Grid.Column="1" Content="{Binding Files}" VerticalAlignment="Center" Foreground="{DynamicResource Color.Text}" />
        </Grid>
    </Grid>
</Window>